// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16 (
        a=false,
        b=instruction,
        sel=instruction[15],
        out[0]=cgjt,
        out[1]=cjeq,
        out[2]=cjlt,
        out[3]=writeM,
        out[4]=writeD,
        out[5]=writeA,
        out[6]=no,
        out[7]=f,
        out[8]=ny,
        out[9]=zy,
        out[10]=nx,
        out[11]=zx,
        out[12]=ma
    );
    Mux16 (a=instruction, b=outA, sel=instruction[15], out=to-a-register);

    // A Register
    Not (in=instruction[15], out=a-type);
    Or (a=a-type, b=writeA, out=load-a);
    ARegister (in=to-a-register, load=load-a, out=a-register, out[0..14]=addressM, out=to-pc);

    Mux16 (a=a-register, b=inM, sel=ma, out=a-to-alu);

    // D Register
    DRegister (in=outD, load=writeD, out=d-register);

    // Counter
    And (a=cjlt, b=ng, out=jlt);

    And (a=cjeq, b=zr, out=jeq);

    Or (a=zr, b=ng, out=not-pos);
    Not (in=not-pos, out=pos);
    And (a=cgjt, b=pos, out=jgt);

    Or (a=jlt, b=jeq, out=jle);
    Or (a=jle, b=jgt, out=load-pc);

    PC (in=to-pc, load=load-pc, inc=true, reset=reset, out[0..14]=pc, out[15]=false);

    ALU (
        x=d-register,
        y=a-to-alu,
        zx=zx,
        nx=nx,
        zy=zy,
        ny=ny,
        f=f,
        no=no,
        out=outM,
        out=outD,
        out=outA,
        zr=zr,
        ng=ng
    );
}
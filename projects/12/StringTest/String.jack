// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength > 0) {
            let str = Memory.alloc(maxLength);
        } else {
            let str = -1;
        }
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(~(str = -1)) {
            do Memory.deAlloc(this);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        do Memory.poke(8000, c);
        do Memory.poke(8001, str);
        do Memory.poke(8002, len);
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    method String int2string(int i) {
        var int lastDigit, c;

        if(i = 0) {
            return this;
        }
        if(i < 0) {
            do appendChar(45);
            do int2string(Math.abs(i));
            return this;
        }

        let lastDigit = i - (i / 10 * 10);
        let c = 48 + lastDigit;

        if(i < 10) {
            do appendChar(c);
            return this;
        } else {
            do int2string(i / 10);
            do appendChar(c); 
            return this;
        }
    }

    method int string2int() {
        var int val, i, d, isNeg;
        let val = 0;
        let i = 0;

        if(str[i] = 45) {
            let isNeg = 1;
            let i = 1;
        }
        while(i < len) {
            let d = str[i] - 48;
            let val = val * 10 + d;
            let i = i + 1;
        }

        if(isNeg) {
            return -val;
        }
        return val;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        return string2int();
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        do int2string(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

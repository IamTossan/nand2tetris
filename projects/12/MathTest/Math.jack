// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits;

    /** Initializes the library. */
    function void init() {
        var int i;

        let bits = Array.new(16);
        let i = 1;
        let bits[0] = 1;
        while(i < 16) {
            let bits[i] = bits[i-1] + bits[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let shiftedX = x;
        let i = 0;
        while(i < 16) {
            if(y & bits[i]) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        if(x = 0 | y = 0) {
            return 0;
        }
        if((x < 0) = (y = 0)) {
            return Math._divide(Math.abs(x), Math.abs(y));
        }
        return -Math._divide(Math.abs(x), Math.abs(y));
    }

    function int _divide(int x, int y) {
        var int q;
        if(y > x) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        if((x - (q + q * y)) < y) {
            return q + q;
        }
        return q + q + 1;
    }

    function int pow(int x, int y) {
        var int i, sum;
        let i = 0;
        let sum = 1;
        while(i < y) {
            let sum = sum * x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp;
        let y = 0;
        let j = 7;

        while(j > -1) {
            let temp = Math.pow(y + Math.pow(2, j), 2);
            if(~(temp > x) & temp > 0) {
                let y = y + Math.pow(2, j);
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b) {
            return a;
        } else {
            return b;
        }
    }
}

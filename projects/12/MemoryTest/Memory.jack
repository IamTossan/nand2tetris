// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int heapBase;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let freeList = heapBase;
        let freeList[0] = 0;      // next
        let freeList[1] = 14334;  // size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array t, o;
        let t = freeList;
        while((t[1] < (size + 2)) & ~(t[0] = 0)) {
            if(~(t[0] = 0)) {
                let t = t[0];
            }
        }
        if((t[0] = 0) & (t[1] < (size + 2))) {
            do Output.printString("no memory available");
            do Sys.error(1);
        }
        let t[1] = t[1] - 2 - size;
        let o = t + t[1] + 2;
        let o[-2] = 0;
        let o[-1] = size;
        return o;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array t;
        let t = freeList;
        while(~(t[0] = 0)) {
            let t = t[0];
        }
        let t[0] = o - 2;
        return;
    }    
}
